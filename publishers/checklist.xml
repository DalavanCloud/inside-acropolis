<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Mo McRoberts <mo.mcroberts@bbc.co.uk>

 Copyright (c) 2014-2016 BBC

  Licensed under the terms of the Open Government Licence, version 2.0.
  You may obtain a copy of the license at:

	https://www.nationalarchives.gov.uk/doc/open-government-licence/version/2/

-->
<chapter version="5.0" xml:lang="en-gb" xmlns="http://docbook.org/ns" xmlns:xinclude="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="publishing-detail">
	<title>Checklist for data publication</title>
	
	<section xml:id="support-common-serialisations">
		<title>Support the most common RDF serialisations</title>
		<para>
			RDF can be serialised in a number of different ways, but there are two serialisations which RES publishers <emphasis role="strong">must provide one of</emphasis> because these are the two serialisations guaranteed to be supported by RES applications:
		</para>
		<segmentedlist>
			<segtitle>Name</segtitle>
			<segtitle>Media type</segtitle>
			<segtitle>Further information</segtitle>
			<seglistitem>
				<seg>Turtle</seg>
				<seg><literal>text/turtle</literal></seg>
				<seg><uri><link xlink:href="http://www.w3.org/TR/2014/REC-turtle-20140225/
">http://www.w3.org/TR/2014/REC-turtle-20140225/</link></uri></seg>
			</seglistitem>
			<seglistitem>
				<seg>RDF/XML</seg>
				<seg><literal>application/rdf+xml</literal></seg>
				<seg><uri><link xlink:href="http://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/">http://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/</link></uri></seg>
			</seglistitem>
		</segmentedlist>
		<para>
			Turtle is increasingly the most common RDF serialisation in circulation and is very widely-supported by processing tools and libraries.
		</para>
		<note>
			<para>The Research &amp; Education Space crawler will request Turtle by preference using HTTP Content Negotiation.</para>
		</note>
		<para>
			RDF/XML is an older serialisation which is slightly more well-supported than Turtle. RDF/XML is often more verbose than the equivalent Turtle expression of a graph, but as an XML-based format can be generated automatically from other kinds of XML using XSLT.
		</para>
		<para>
			If you are considering publishing your data as JSON, you may consider publishing it as <link xlink:href="http://json-ld.org">JSON-LD</link>, a serialisation of RDF which is intended to be useful to consumers which don’t understand RDF specifically. JSON-LD isn’t currently supported by RES, but may be in the future.
		</para>
	</section>
	
	<section xml:id="use-common-vocabs">
		<title>Use terms from existing common vocabularies where applicable</title>
		<para>
			The goal of Linked Open Data in particular, and as a consequence of
			the Research &amp; Education Space, is to create a web of
			data which applications can navigate seamlessly. Simply using
			common underlying protocols and data serialisations on their own
			is not enough to achieve this: both publishers and applications
			need to support the same set of terms for classes and properties
			(i.e., use the same vocabularies) where it’s feasible to do so.
		</para>
		<para>
			This doesn’t mean that where there isn’t a widely-used term to
			support something from your data that you shouldn’t publish it,
			rather than you should only invent your own vocabularies of
			terms where existing well-known terms don’t fit.
		</para>
		<tip>
			<para>
				Remember that URIs are treated as opaque strings a lot of
				the time, so if you invent a term called
				<uri>http://example.com/terms#title</uri>, and abbreviate
				it in your documentation and Turtle as <literal>ex:title</literal>,
				that doesn’t mean that any application can safely
				assume that it represents the descriptive title of an entit
				(indeed, it may represent a different
				<link xlink:href="https://en.wiktionary.org/wiki/title">kind of title</link>,
				or simply be poorly-named for humans!).
			</para>
			<para>
				And, while it’s possible to publish RDF which states that
				<uri>ex:title</uri> is a sub-property of (or even is equivalent
				to) <uri>dct:title</uri>, properly interpeting that hierarchy
				will be out of the scope of implementation for many applications
				developed using the Research &amp; Education Space platform.
			</para>
		</tip>
		<para>
			The second part of this book, <cite><citetitle><link xlink:href="#using">Working with the platform</link></citetitle></cite>,
			describes the different vocabularies in widespread use for different
			classes of entity (physical, digital, real, or imaginary) that
			you might need to describe. Where some of the terms have specific
			meaning to the platform, these are noted in the relevant
			sections and in the <link xlink:href="#class-index">class</link>
			and <link xlink:href="#predicate">predicate</link> indices.
		</para>
	</section>
	
	<section xml:id="self-describing-documents">
		<title>Describe the document and serialisations as well as the item</title>
		<para>
			A minimal RDF serialisation intended for use by RES must include data about three distinct subjects:
		</para>
		<segmentedlist>
			<segtitle>Subject</segtitle>
			<segtitle>Example</segtitle>
			<seglistitem>
				<seg>Document URL</seg>
				<seg><literal>http://ialm.int/books/9781899066100</literal></seg>
			</seglistitem>
			<seglistitem>
				<seg>Representation URL</seg>
				<seg><literal>http://ialm.int/books/9781899066100.ttl</literal></seg>
			</seglistitem>
			<seglistitem>
				<seg>Item URI</seg>
				<seg><literal>http://ialm.int/books/9781899066100#id</literal></seg>
			</seglistitem>
		</segmentedlist>
		<para>
			It is recommended that publishers describe any other serialisations which they are making available as well, but it is not currently a requirement to do so.
		</para>
		
		<para>
			A description of the metadata which should be served about the document and representations is included in the <link xlink:href="#document-metadata">Metadata about documents</link> section.
		</para>
	</section>
	
	<section xml:id="explicit-licensing">
		<title>Include licensing information in the data</title>
		<para>
			The data about the representation <emphasis role="strong">must</emphasis>
			include a rights information triple referring to the well-known URI
			of a supported license. The <link xlink:href="#rights">rights and licensing</link>
			section describes a simple approach for doing this.
		</para>
		<warning>
			<para>
				The RES crawler will discard data which does not include licensing information, because without it the platform cannot determine nor relay whether it is suitable for use by RES applications.
			</para>
		</warning>
		<section xml:id="rights-link">
			<title>Expressing rights information using the Link HTTP header</title>
			
			<para>
				It’s also possible to express licensing information using the <literal><link xlink:href="https://tools.ietf.org/html/rfc5988">Link</link></literal> HTTP response header, instead of incorporating it into the data itself. While it will mean that it’s less obvious to somebody looking directly at your data what the licensing terms are, there may be less work involved in expressing the information this way, depending upon how your particular setup. 
			</para>
			<para>	
				To do so, simply send a <literal>Link</literal> header pointing to one of the <link xlink:href="#licenses">well-known license URIs</link> listed below and <literal>rel="license"</literal>.
			</para>
			<programlisting><![CDATA[HTTP/1.1 200 OK
Content-Type: text/turtle
Link: <http://creativecommons.org/publicdomain/zero/1.0/>;rel="license"]]></programlisting>
			<note>
				<para>The Research &amp; Education Space crawler translates <literal>Link</literal> headers into RDF triples while evaluating resources it has retrieved. Unless the header specifies otherwise, the subject is the URI considered to be that of the document (which is the <literal>Content-Location</literal> if specified, or the <varname>request-URI</varname> otherwise), the predicate is the <literal>rel</literal> value interpreted as a URI against a base of <uri>http://www.w3.org/1999/xhtml/vocab#</uri> (in other words, <literal>license</literal> is interpreted as <uri>http://www.w3.org/1999/xhtml/vocab#license</uri>, while a fully-qualified URI will be used as-is), and the object is the link <emphasis>target</emphasis> (in the example above, <uri>http://creativecommons.org/publicdomain/zero/1.0/</uri>).</para>
			</note>

			<section xml:id="rights-link-apache">
				<title>Configuring Apache web server to send a Link header</title>
				<para>
					The Apache web server can be configured to send a <literal>Link</literal> header containing licensing information using <literal><link xlink:href="http://httpd.apache.org/docs/current/mod/mod_headers.html">mod_headers</link></literal>. Once the module has been enabled, you can use a configuration stanza similar to:—
				</para>
				<screen><![CDATA[Header append Link "<http://creativecommons.org/publicdomain/zero/1.0/>;rel=\"license\""]]></screen>
				<para>
					The <literal>Header</literal> directive is very flexible, and can be used at server, virtual host, virtual path or directory (<filename>.htaccess</filename>) level.
				</para>
			</section>

			<section xml:id="rights-link-varnish">
				<title>Configuring Varnish to send a Link header</title>
				<para>
					Varnish can be configured to send a <literal>Link</literal> header containing licensing information. You can do this by modifying the <literal>beresp.http</literal> object in the <literal>vcl_fetch</literal> function:
				</para>
				<programlisting language="vcl"><![CDATA[sub vcl_fetch
{
	if(req.url ~ "^/books/")
	{
		set beresp.http.Link = "<http://creativecommons.org/publicdomain/zero/1.0/>;rel=\"license\"";
	}
}
]]></programlisting>
			</section>
		</section>
		
	</section>
	
	<section xml:id="link-alternate">
		<title>Link to the RDF representations from the HTML variant</title>
		<para>
			In your HTML representations, use the <code>&lt;link&gt;</code> element (within the <code>&lt;head&gt;</code> element) with a <literal>rel</literal> attribute of <literal>"alternate"</literal> in order to link to the other representations of the same document:
		</para>
		<programlisting language="html"><![CDATA[<link rel="alternate" type="application/rdf+xml" href="/books/9781899066100.rdf">
<link rel="alternate" type="text/turtle" href="/books/9781899066100.ttl">]]></programlisting>
		<para>
			While it’s less efficient than content negotiation (see below) for both consuming applications and for your server to access your alternative serialisations this way, linking to them from your HTML provides a useful fall-back capability in the event that content negotiation fails or has to be disabled—for example, if you need to switch your website to be served from a content delivery network which doesn’t support negotiation.
		</para>
		<para>
			It’s not the preferred option because consumers must first obtain the HTML, parse it, and then request the RDF. Often, generating the HTML page will also be more expensive than generating the equivalent RDF serialisations.
		</para>
	</section>
	
	<section xml:id="perform-conneg">
		<title>Perform content negotiation when requests are received for item URIs</title>
		<para>
			If you use fragment-based URIs, this means that your web server must be configured to perform content negotiation on requests received for the portion of the URI before the hash (<literal>#</literal>) sign.
		</para>
		<para>
			For example, if your subject URIs are in the form:
		</para>
		<blockquote><para><literal>http://ialm.int/books/9781899066100#id</literal></para></blockquote>
		<para>
			Then when your server receives requests for the document:
		</para>
		<blockquote><para><literal>/books/9781899066100</literal></para></blockquote>
		<para>
			It should perform content negotiation and return an appropriate media type, including the supported RDF serialisations if requested.
		</para>
		<para>
			When sending a response, the server <emphasis role="strong">must</emphasis> send an appropriate <literal>Vary</literal> header, and should send a <literal>Content-Location</literal> header referring to the representation being served. For example:
		</para>
		<programlisting><![CDATA[HTTP/1.0 OK
Server: Apache/2.2 (Unix)
Vary: Accept
Content-Type: text/turtle; charset=utf-8
Content-Location: /books/9781899066100.ttl
Content-Length: 272
…]]></programlisting>
		<tip>
			<para>The Apache web server automatically sends the correct headers when configured to perform Content Negotiation on a set of static files. See the Apache <link xlink:href="http://httpd.apache.org/docs/current/mod/mod_negotiation.html">mod_negotiation</link> module documentation for further details on its configuration.</para>
		</tip>
	</section>
</chapter>
