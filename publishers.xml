<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Mo McRoberts <mo.mcroberts@bbc.co.uk>

 Copyright (c) 2014 BBC

  Licensed under the terms of the Creative Commons Attribution International
  4.0 license. You may obtain a copy of the license at:

	http://creativecommons.org/licenses/by/4.0/

-->
<chapter version="5.0" xml:lang="en-gb" xmlns="http://docbook.org/ns" xmlns:xinclude="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="publishers">
	<title>Requirements for publishers</title>
	
	<para>
		Publishers wishing to make their data visible in the Acropolis index and useable by RES applications must conform to a small set of basic requirements. These are:
	</para>

	<itemizedlist>
		<listitem>
			<para>The data must be expressed as RDF and published as Linked Open Data;</para>
		</listitem>
		<listitem>
			<para>the data must be licensed under permissive terms (in particular, it must allow re-use in both	commercial and non-commercial applications);</para>
		</listitem>
		<listitem>
			<para>the licensing terms must be included in the data itself so that consumers can perform automated due diligence before using it;</para>
		</listitem>
		<listitem>
			<para>the data should use the vocabularies described in this book for best results (although you are free to use other vocabularies too).</para>
		</listitem>
	</itemizedlist>

	<para>
		Although RES requires that you publish Linked Open Data, that doesn’t mean you can’t also publish your data in other ways. While human-facing HTML pages are the obvious example, there’s nothing about publishing Linked Open Data which means you can’t also publish JSON with a bespoke schema, CSV, OpenOffice.org spreadsheets, or operate complex query APIs requiring registration to use.
	</para>
	<para>
		In fact, best practice generally is that you publish in as many formats as you’re generally able to, and do so in a consistent fashion. And, while your “data views” (that is, the structured machine-readable representations of your data about things) are going to be very dull and uninteresting to most human beings, that doesn’t mean that you can’t serve nicely-designed web pages about them as the serialisation for ordinary web browsers.
	</para>
	<section xml:id="publishing-detail">
		<title>Checklist for data publication</title>
		
		<section xml:id="support-common-serialisations">
			<title>Support the most common RDF serialisations</title>
			<para>
				RDF can be serialised in a number of different ways, but there are two serialisations which RES publishers <emphasis role="strong">must</emphasis> provide because these are the two serialisations guaranteed to be supported by RES applications:
			</para>
			<segmentedlist>
				<segtitle>Name</segtitle>
				<segtitle>Media type</segtitle>
				<segtitle>Further information</segtitle>
				<seglistitem>
					<seg>Turtle</seg>
					<seg><literal>text/turtle</literal></seg>
					<seg><uri><link xlink:href="http://www.w3.org/TR/2014/REC-turtle-20140225/
">http://www.w3.org/TR/2014/REC-turtle-20140225/</link></uri></seg>
				</seglistitem>
				<seglistitem>
					<seg>RDF/XML</seg>
					<seg><literal>application/rdf+xml</literal></seg>
					<seg><uri><link xlink:href="http://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/">http://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/</link></uri></seg>
				</seglistitem>
			</segmentedlist>
			<para>
				Turtle is increasingly the most common RDF serialisation in circulation and is very widely-supported by processing tools and libraries.
			</para>
			<para>
				RDF/XML is an older serialisation which is slightly more well-supported than Turtle. RDF/XML is often more verbose than the equivalent Turtle expression of a graph, but as an XML-based format can be generated automatically from other kinds of XML using XSLT.
			</para>
			<para>
				If you are considering publishing your data as JSON, you may consider publishing it as <link xlink:href="http://json-ld.org">JSON-LD</link>, a serialisation of RDF which is intended to be useful to consumers which don’t understand RDF specifically. JSON-LD isn’t currently supported by RES, but may be in the future.
			</para>
			<note>
				<para>The RES crawler will request Turtle by preference.</para>
			</note>
		</section>
		
		<section xml:id="self-describing-documents">
			<title>Describe the document and serialisations as well as the item</title>
			<para>				
				A minimal RDF serialisation intended for use by RES must include data about three distinct subjects:
			</para>
			<segmentedlist>
				<segtitle>Subject</segtitle>
				<segtitle>Example</segtitle>
				<seglistitem>
					<seg>Document URL</seg>
					<seg><literal>http://ialm.int/books/9781899066100</literal></seg>
				</seglistitem>
				<seglistitem>
					<seg>Representation URL</seg>
					<seg><literal>http://ialm.int/books/9781899066100.ttl</literal></seg>
				</seglistitem>
				<seglistitem>
					<seg>Item URI</seg>
					<seg><literal>http://ialm.int/books/9781899066100#id</literal></seg>
				</seglistitem>
			</segmentedlist>
			<para>
				It is recommended that publishers describe any other serialisations which they are making available as well, but it is not currently a requirement to do so.
			</para>
			
			<para>
				A description of the metadata which should be served about the document and representations is included in the <link xlink:href="#document-metadata">Metadata about documents</link> section.
			</para>
		</section>
		
		<section xml:id="explicit-licensing">
			<title>Include licensing information in the data</title>
			<para>
				The data about the document or representation <emphasis role="strong">must</emphasis> include a rights information predicate referring to the well-known URI of a supported license. See the <link xlink:href="#rights">Metadata describing rights and licensing</link> section for further details.
			</para>
			<warning>
				<para>
					The RES crawler will discard data which does not include licensing data, because without it, the data cannot be used by RES applications.
				</para>
			</warning>
		</section>
		
		<section xml:id="link-alternate">
			<title>Link to the RDF representations from the HTML variant</title>		
			<para>
				In your HTML representations, use the <code>&lt;link&gt;</code> element (within the <code>&lt;head&gt;</code> element) with a <literal>rel</literal> attribute of <literal>"alternate"</literal> in order to link to the other representations of the same document:
			</para>
			<programlisting language="html"><![CDATA[<link rel="alternate" type="application/rdf+xml" href="/books/9781899066100.rdf">
<link rel="alternate" type="text/turtle" href="/books/9781899066100.ttl">]]></programlisting>
			<para>
				While it’s less efficient than content negotiation (see below) for both consuming applications and for your server to access your alternative serialisations this way, linking to them from your HTML provides a useful fall-back capability in the event that content negotiation fails or has to be disabled—for example, if you need to switch your website to be served from a content delivery network which doesn’t support negotiation.
			</para>
			<para>
				It’s not the preferred option because consumers must first obtain the HTML, parse it, and then request the RDF. Often, generating the HTML page will also be more expensive than generating the equivalent RDF serialisations.
			</para>
		</section>
		
		<section xml:id="perform-conneg">
			<title>Perform content negotiation when requests are received for item URIs</title>
			<para>
				If you use fragment-based URIs, this means that your web server must be configured to perform content negotiation on requests received for the portion of the URI before the hash (<literal>#</literal>) sign.
			</para>
			<para>
				For example, if your subject URIs are in the form:
			</para>
			<blockquote><para><literal>http://ialm.int/books/9781899066100#id</literal></para></blockquote>
			<para>
				Then when your server receives requests for the document:
			</para>
			<blockquote><para><literal>/books/9781899066100</literal></para></blockquote>
			<para>
				It should perform content negotiation and return an appropriate media type, including the supported RDF serialisations if requested.
			</para>
			<para>
				When sending a response, the server <emphasis role="strong">must</emphasis> send an appropriate <literal>Vary</literal> header, and should send a <literal>Content-Location</literal> header referring to the representation being served. For example:
			</para>
			<programlisting><![CDATA[HTTP/1.0 OK
Server: Apache/2.2 (Unix)
Vary: Accept
Content-Type: text/turtle; charset=utf-8
Content-Location: /books/9781899066100.ttl
Content-Length: 272
…]]></programlisting>
			<tip>
				<para>The Apache web server automatically sends the correct headers when configured to perform Content Negotiation on a set of static files. See the Apache <link xlink:href="http://httpd.apache.org/docs/current/mod/mod_negotiation.html">mod_negotiation</link> module documentation for further details on its configuration.</para>
			</tip>
		</section>
	</section>
	
</chapter>
