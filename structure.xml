<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Mo McRoberts <mo.mcroberts@bbc.co.uk>

 Copyright (c) 2014 BBC

  Licensed under the terms of the Open Government Licence, version 2.0.
  You may obtain a copy of the license at:

	https://www.nationalarchives.gov.uk/doc/open-government-licence/version/2/

-->
<chapter version="5.0" xml:lang="en-gb" xmlns="http://docbook.org/ns" xmlns:xinclude="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="api">
	<title>The RES API: the index and how it’s structured</title>
	
	<tip>
		Because the API is read-only and exposed through HTTP Content Negotiation,
		there are no API keys or other authentication mechanisms: applications
		can begin using the API immediately by <link xlink:href="#consumers">consuming it
		as Linked Open Data</link>.
	</tip>
	
	<para>
		Vocabularies used in this section:
	</para>

	<segmentedlist>
		<segtitle>Vocabulary</segtitle>
		<segtitle>Namespace URI</segtitle>
		<segtitle>Prefix</segtitle>

		<seglistitem>
			<seg><link xlink:href="http://www.opensearch.org/Specifications/OpenSearch/1.1">OpenSearch</link></seg>
			<seg><uri>http://a9.com/-/spec/opensearch/1.1/</uri></seg>
			<seg><literal>osd:</literal></seg>
		</seglistitem>
		
		<seglistitem>
			<seg><link xlink:href="http://www.w3.org/TR/owl2-syntax/">OWL</link></seg>
			<seg><uri>http://www.w3.org/2002/07/owl#</uri></seg>
			<seg><literal>owl:</literal></seg>
		</seglistitem>
		
		<seglistitem>
			<seg><link xlink:href="http://www.w3.org/TR/2014/PER-rdf-schema-20140109/">RDF schema</link></seg>
			<seg><uri>http://www.w3.org/2000/01/rdf-schema#</uri></seg>
			<seg><literal>rdfs:</literal></seg>
		</seglistitem>
		
		<seglistitem>
			<seg><link xlink:href="http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/">RDF syntax</link></seg>
			<seg><uri>http://www.w3.org/1999/02/22-rdf-syntax-ns#</uri></seg>
			<seg><literal>rdf:</literal></seg>
		</seglistitem>

		<seglistitem>
			<seg><link xlink:href="http://vocab.deri.ie/void">VoiD</link></seg>
			<seg><uri>http://rdfs.org/ns/void#</uri></seg>
			<seg><literal>void:</literal></seg>
		</seglistitem>
		
		<seglistitem>
			<seg><link xlink:href="http://www.w3.org/1999/xhtml/vocab">XHTML Vocabulary</link></seg>
			<seg><uri>http://www.w3.org/1999/xhtml/vocab#</uri></seg>
			<seg><literal>xhtml:</literal></seg>
		</seglistitem>
	</segmentedlist>
	
	<para>
		At the core of the platform is the <firstterm>RES index</firstterm>.
		This index is available as <link xlink:href="http://acropolis.org.uk/">web pages</link>
		(to make it easier for application developers to see what’s there and
		how it works), but is primarily published as Linked Open Data. Accessing
		the index and requesting machine-readable data is the RES platform API.
	</para>
	
	<para>
		The RES index takes the form of a <literal>void:Dataset</literal>, and
		the operations that you might perform against the RES index will often
		be applicable to other datasets that you might encounter.
	</para>
	<para>
		Depending upon your application design, it may be desirable to offer
		the same browse and query capabilities to any dataset that the user
		navigates to, rather than hard-coding behaviour specific to the RES
		index.
	</para>
	<info>
		It is likely that the capabilties of the RES index will evolve over time.
		While every effort will be made not to <emphasis>remove</emphasis>
		functionality or fundamentally alter the way that it is exposed,
		applications should where possible base the capabilities offered upon
		those advertised by the data describing the index (see the
		<link xlink:href="#capabilities">following section</link>).
	</info>
	
	<section xml:id="capabilities">
		<title>Discovering capabilities</title>
		
		<para>
			As the index is presented as Linked Open Data, discovering information
			about it is the same process used for obtaining descriptive metadata
			for anything else: de-reference the entity URI (which in the case of
			the index is the API root—currently <uri>http://beta.acropolis.org.uk/</uri>),
			and examine the triples whose subject is that URI.
		</para>
		
		<segmentedlist>
			<segtitle>Capability</segtitle>
			<segtitle>Expressed using…</segtitle>
			
			<seglistitem>
				<seg>Class partitions (e.g., “all people”, “all places”)</seg>
				<seg><literal>void:classPartition</literal></seg>
			</seglistitem>
			
			<seglistitem>
				<seg>Browse endpoint for everything in the index</seg>
				<seg><literal>void:rootResource</literal></seg>
			</seglistitem>
			
			<seglistitem>
				<seg>Locate an entry from an external URI</seg>
				<seg><literal>void:uriLookupEndpoint</literal></seg>
			</seglistitem>
		
			<seglistitem>
				<seg>Free-form search (complete description document)</seg>
				<seg><literal>void:openSearchDescription</literal></seg>
			</seglistitem>
			
			<seglistitem>
				<seg>Free-form search URL template</seg>
				<seg><literal>osd:template</literal></seg>
			</seglistitem>
			
			<seglistitem>
				<seg>Links to entities contained within the index</seg>
				<seg><literal>rdfs:seeAlso</literal></seg>
			</seglistitem>
			
			<seglistitem>
				<seg>References to original source data about an entity in the index</seg>
				<seg><literal>owl:sameAs</literal></seg>
			</seglistitem>
			
			<seglistitem>
				<seg>Links to first, last, previous and next pages of results</seg>
				<seg><literal>xhtml:first</literal>, <literal>xhtml:last</literal>, <literal>xhtml:prev</literal>, <literal>xhtml:next</literal></seg>
			</seglistitem>
		
		</segmentedlist>
	</section>
	
	<section xml:id="structure">
		<title>Structure of the index</title>
		<para>
			The RES index is made up of a series of <firstterm>composite</firstterm>
			entities which are constructed using the data discovered by the
			crawler. Each of the composite entities has an <literal>owl:sameAs</literal>
			relationship with the various source entities used to construct it,
			a portion of whose data is cached in the index.
		</para>
		<para>
			If you dereference the URI for the RES index, the
			result is some metadata about the index itself, including information about
			how to perform different kinds of query, the different browseable
			partitions, and some selected sample entities.
		</para>
		<para>
			When a query is performed against the index (i.e., by adding some query
			parameters to the URI), the result is a small amount of metadata about
			the query and the results along with a list of these composite entities.
		</para>
		<para>
			If you then dereference one of these entities—<firstterm>drilling down</firstterm>
			into it—the document returned will contain both the composite entity, and
			the cached data about the source entities. If the entity references, or is
			referenced by other entities, the relevant composite entities are also
			included.
		</para>
		<tip>
			An index of the predicates which are used to generate the composite
			entities and cached alongside them can be found at <link xlink:href="#predicate-index">the
			end of the book</link>.
		</tip>
	</section>
	
	<section xml:id="operations">
		<title>Common API operations</title>
		<para>
			Below is a list of some of the most common kinds of operation an application
			might wish to perform against the RES index. Note that these operations can
			apply to <emphasis>any</emphasis> dataset.
		</para>
		
		<segmentedlist>
			<segtitle>Operation</segtitle>
			<segtitle>Implementation</segtitle>
		
			<seglistitem>
				<seg>Determine the kind of entity that retrieved data describes</seg>
				<seg>Examine the <literal>rdf:type</literal> properties and compare against the <link xlink:href="#class-index">class index</link>.</seg>
			</seglistitem>
		
			<seglistitem>
				<seg>Locate class partitions</seg>
				<seg>Iterate the <literal>void:classPartition</literal> properties of the index</seg> 
			</seglistitem>
			
			<seglistitem>
				<seg>Find the index entry for a particular entity</seg>
				<seg>Append the encoded entity URI to the value of the <literal>void:uriLookupEndpoint</literal> property</seg>
			</seglistitem>
			
			<seglistitem>
				<seg>Perform a text query</seg>
				<seg>Populate the template specified in the <literal>osd:template</literal> property (if present), or alternatively the template specified in the <tag class="element">Url</tag> element corresponding to the desired data format in the OpenSearch Description document linked via the <literal>void:openSearchDescription</literal> property</seg>
			</seglistitem>
			
			<seglistitem>
				<seg>Locate the source data for an entity</seg>
				<seg>Once the data for an entity has been retrieved, find the <literal>owl:sameAs</literal> triples which have the entity URI as either the subject or the object</seg>
			</seglistitem>
			
			<seglistitem>
				<seg>List the items in the dataset or a partition</seg>
				<seg>Retrieve the data either from the URL in the <literal>void:rootResource</literal> property, from one of the <literal>void:classPartition</literal> properties, or a query, then locate all of the <literal>rdfs:seeAlso</literal> properties which have that URL as a subject.</seg>
			</seglistitem>
			
			<seglistitem>
				<seg>Paginate through a dataset or query results</seg>
				<seg>Follow the <literal>xhtml:prev</literal> and <literal>xhtml:next</literal> properties where available</seg>
			</seglistitem>
		</segmentedlist>
	</section>

</chapter>
