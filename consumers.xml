<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Mo McRoberts <mo.mcroberts@bbc.co.uk>

 Copyright (c) 2014 BBC

  Licensed under the terms of the Open Government Licence, version 2.0.
  You may obtain a copy of the license at:

	https://www.nationalarchives.gov.uk/doc/open-government-licence/version/2/

-->
<chapter version="5.0" xml:lang="en-gb" xmlns="http://docbook.org/ns" xmlns:xinclude="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="consumers">
	<title>Requirements for consuming applications</title>
	
	<para>
		Applications built for RES must be able to understand the index assembled by Acropolis, as well as the source data it refers to. Practically, it means that they must be able to retrieve and process RDF from remote web servers and interpret at least the <link xlink:href="#common">common metadata</link> vocabularies described in this book which are relevant to the consuming application.
	</para>

	<section xml:id="retrieving-lod">
		<title>Retrieving and processing Linked Open Data</title>
		<tip>
			Although it's useful to understand the mechanics of consuming
			Linked Open Data if you are developing applications for it,
			consumer libraries may exist for your preferred platform
			and programming language already. A list of some of these is
			included in <link xlink:href="#lod-consumer-tools">an appendix</link>
			at the end of this book.
		</tip>
		<para>
			In a perfect world, consuming Linked Open Data is as straightforward as:—
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Make a request for the URI you want to get data about, sending an
					<code>Accept</code> HTTP request header containing the MIME types of
					the formats you support in your application.
				</para>
			</listitem>
			<listitem>
				<para>
					Parse the data in the response using an RDF parser.
				</para>
			</listitem>
			<listitem>
				<para>
					Examine the parsed data to find triples whose subject is the URI that you
					started with.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			While this process is simple, and could be implemented using virtually any HTTP
			client in common use today, it brings about a few questions. How do you deal with
			redirects? What happens if the server doesn't return the data in the format that
			you asked for? Where do you <emphasis>start</emphasis>?
		</para>
		<para>
			This chapter aims to answer all of these questions so that your RES application
			can be both useful and robust in face of real-world challenges.
		</para>
		
		<section xml:id="consuming-detail">
			<title>Consuming Linked Open Data in detail</title>
			
			<para>
				As part of the RES project, we are developing a <link xlink:href="https://bbcarchdev.github.io/liblod/">Linked
				Open Data client library</link>. Although at present this library is currently
				only available to low-level languages such as C and C++, the process
				it follows can be implemented in any language. It is intended to be a liberal
				consumer which can deal with real situations, such as different kinds of
				redirects and content negotiation failing or being disabled by the publisher.
			</para>
			<para>
				The algorithm is as follows (implemented in the LOD library in
				<link xlink:href="https://github.com/bbcarchdev/liblod/blob/master/fetch.c"><filename>fetch.c</filename></link>):—
			</para>
			<orderedlist>
				<listitem>
					<para>
						Optionally, check if data about the <varname>request-URI</varname>
						is present in our RDF model: if so, return a reference to it.
					</para>
				</listitem>
				<listitem>
					<para>
						Append <varname>request-URI</varname> to
						<varname>subject-list</varname>.
					</para>
				</listitem>
				<listitem>
					<para>
						If <varname>request-URI</varname> has a
						<link xlink:href="https://wikipedia.org/wiki/Fragment_identifier">fragment</link>,
						remove it and store it as <varname>fragment</varname>.
					</para>
				</listitem>
				<listitem>
					<para>
						Set <varname>followed-link</varname> to <constant>false</constant>,
						and <varname>count</varname> to 0.
					</para>
				</listitem>
				<listitem>
					<para>
						If <varname>count</varname> is more than our configured
						<varname>max-redirects</varname> value, return an error status
						indicating that the redirect limit has been exceeded.
					</para>
				</listitem>
				<listitem>
					<para>
						Create an HTTP request for <varname>request-URI</varname>,
						setting the <code>Accept</code> header based upon the data
						formats supported by the application. Note that RES requires
						publishers and applications to support at
						<emphasis>least</emphasis> RDF/XML
						(<constant>application/rdf+xml</constant>) and Turtle
						(<constant>text/turtle</constant>), but both clients and servers
						may support other formats which can be negotiated.
					</para>
				</listitem>
				<listitem>
					<para>
						Perform the HTTP request. Note that this should be a single
						request-response pair, and not automatically follow redirects.
					</para>
				</listitem>
				<listitem>
					<para>
						If a low-level error in performing the request occurred (such as
						the hostname in the URI not being resolveable), return an error
						status indicating that the request could not be performed.
					</para>
				</listitem>
				<listitem>
					<para>
						Store the canonicalised form of <varname>request-URI</varname>
						as the <varname>base</varname>.
					</para>
				</listitem>
				<listitem>
					<para>
						Obtain the <code>Content-Type</code> of the response, if any, and store
						it in <varname>content-type</varname>.
					</para>
				</listitem>
				<listitem>
					<para>
						If the HTTP status code is between 200 and 299 and there is a
						document body:—
					</para>
					<orderedlist>
						<listitem>
							<para>
								If <varname>content-type</varname> is not set, return an
								error status indicating that no suitable data could be found.
							</para>
							<para>
								If the <code>Content-Type</code> is not one of <constant>text/html</constant>,
								<constant>application/xhtml+xml</constant>, <constant>application/vnd.wap.xhtml+xml</constant>, <constant>application/vnd.ctv.xhtml+xml</constant> or
								<constant>application/vnd.hbbtv.xhtml+xml</constant>, then skip to
								step 14.
							</para>
						</listitem>
						<listitem>
							<para>
								If <varname>followed-link</varname> is true, return an error
								status indicating that a <code>&lt;link rel="alternate"&gt;</code>
								has already been followed.
							</para>
						</listitem>
						<listitem>
							<para>
								Parse the returned document as HTML, and extract any
								<tag class="element">link</tag> elements within
								<tag class="element">head</tag>
								which have a <tag class="attribute">type</tag> and
								<tag class="attribute">href</tag> attributes and a
								<tag class="attribute">rel</tag> attribute with a value
								of <constant>alternate</constant>.
							</para>
						</listitem>
						<listitem>
							<para>
								If no suitable <tag class="element">link</tag> elements
								were found, return an error status indicating that no
								suitable data could be found.
							</para>
						</listitem>
						<listitem>
							<para>
								Rank the returned links based upon the application's weighting
								values (allowing an application to consume a particular
								serialisation if available in preference to others).
							</para>
						</listitem>
						<listitem>
							<para>
								Append the highest ranked link’s URI (that is, the value of the
								<tag class="attribute">href</tag> attribute) to
								<varname>subject-list</varname>,
								set <varname>request-URI</varname> to it,
								set <varname>followed-link</varname> to <constant>true</constant>,
								increment <varname>count</varname>, and skip back to step 5.
							</para>
						</listitem>	
					</orderedlist>
				</listitem>
				<listitem>
					<para>
						If the HTTP status code is between 300 and 399:—
					</para>
					<orderedlist>
						<listitem>
							<para>
								Set <varname>target-URI</varname> to the redirect target
								(the <code>Location</code> header of the HTTP response). If no
								target is available, return with an error status indicating
								that an unsuitable HTTP status was returned.
							</para>
						</listitem>
						<listitem>
							<para>
								If the HTTP status code is 303, set <varname>request-URI</varname>
								to <varname>target-URI</varname>, increment
								<varname>count</varname> and skip back to step 5.
							</para>
						</listitem>
						<listitem>
							<para>
								If <varname>fragment</varname> is set, append it to
								<varname>target-URI</varname>, replacing any fragment which might
								be present already.
							</para>
						</listitem>
						<listitem>
							<para>
								Push <varname>target-URI</varname> onto
								<varname>subject-list</varname>, increment
								<varname>count</varname>, and skip back to step 5.
							</para>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<para>
						If the HTTP code is not between 200 and 399, return an error status
						indicating that an HTTP error was returned by the server.
					</para>
				</listitem>
				<listitem>
					<para>
						Optionally, if <varname>content-type</varname> is
						<constant>text/plain</constant>,
						<constant>application/octet-stream</constant> or
						<constant>application/x-unknown</constant>,
						attempt to determine a new content type via
						<link xlink:href="https://wikipedia.org/wiki/Content_sniffing">content sniffing</link>. If successful, store the new type in <varname>content-type</varname>.
					</para>
				</listitem>
				<listitem>
					<para>
						Parse the document body as <varname>content-type</varname> into
						our RDF model. If the type is not supported, or parsing fails for any
						other reason, return an error status.
					</para>
				</listitem>
				<listitem>
					<para>
						Starting with the first item in <varname>subject-list</varname>:—
					</para>
					<orderedlist>
						<listitem>
							<para>
								Set <varname>subject-URI</varname> to the current entry in the
								list.
							</para>
						</listitem>
						<listitem>
							<para>
								Perform a query against the RDF model to determine whether any
								triples whose subject are <varname>subject-URI</varname> exist.
							</para>
						</listitem>
						<listitem>
							<para>
								If triples were found, return a reference to them.
							</para>
						</listitem>
						<listitem>
							<para>
								Otherwise, move to the next item in
								<varname>subject-list</varname>.
							</para>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<para>
						Finally, return an error status indicating that no triples were
						found in the retrieved data.
					</para>
				</listitem>
			</orderedlist>
		</section>
		
		<section xml:id="starting">
			<title>A starting point: the RES index</title>
			<para>
				Just as an ordinary web browser needs a homepage or an address bar, so
				too do Linked Open Data applications. Whether your application has a fixed
				configured starting point or is intended to be an open-ended “data browser”,
				the RES index is intended to be a useful Linked Open Data home for many
				applications.
			</para>
			<para>
				Described in more detail in <citetitle><link xlink:href="#api">The RES API: the index and how it’s structured</link></citetitle>,
				the index is itself Linked Open Data which can
				be retrieved and processed using the algorithms described above. The URI for
				the index is currently
				<uri><link xlink:href="http://beta.acropolis.org.uk/">http://beta.acropolis.org.uk</link></uri>, and this URI
				can be used as default “homepage” for RES applications.
			</para>
			<warning>
				The URI to the API will change soon as the live version of the platform replaces
				the current beta.
			</warning>
			<para>
				In the same way that a homepage only provides the starting point for a web
				browser, the same is true of the RES index: applications can allow users
				to explore and search the index, but to also follow the onward links to
				source data and media assets.
			</para>
			<para>
				For some applications, use the RES index as a starting point won’t be
				appropriate: it may be necessary or useful to implement an intermediary
				service that provides additional capabilities or a specific curated
				subset of resources. There is no requirement that RES applications
				<emphasis>must</emphasis> directly use the base of the RES index
				as their home.
			</para>
		</section>
	</section>

	<section xml:id="editorial-guidelines-for-product-developers">
		<title>Editorial Guidelines for Product Developers</title>
		<para>
			What do we mean by “editorial”?
		</para>
		<para>
			In this context we mean what is <emphasis>in</emphasis> the metadata and the associated media, such as text, video or images.
		</para>
		<itemizedlist>	
			<listitem>
				<para>What does it say and what is it about?</para>
			</listitem>
			<listitem>
				<para>Is it suitable for all ages to see and hear?</para>
			</listitem>
			<listitem>
				<para>Are there any limits you would want to set around who could see this material?</para>
			</listitem>
		</itemizedlist>
		<para>
			When making metadata and media available in to education, it is important to understand the expectations of the audience in terms of what they will see and hear.
		</para>
		<para>
			These guidelines are intended to help product developers think about these issues as early in the design and development process as possible.
		</para>
		<para>
			The RES platform is funded with public money and needs to show that it is serving the public interest and behaving responsibly.
		</para>
		<itemizedlist>	
			<listitem>
				<para>The RES project envisages that in schools and FE colleges it will be teachers who are the primary users of the products built on top of the RES platform, both the catalogue and the assets.</para>
			</listitem>
			<listitem>
				<para>Teachers will then judge the suitability of the content for particular age ranges and make it available to pupils.</para>
			</listitem>
			<listitem>
				<para>The pupils and students will therefore be the secondary users of any products, accessing a moderated version of the whole platform.</para>
			</listitem>
			<listitem>
				<para>Teachers will need to share material with pupils and other teachers and this functionality will be vital.</para>
			</listitem>
			<listitem>
				<para>Where possible the metadata will include any guidance as to the suitability of the content for particular age groups, for example the BBC would include <link xlink:href="http://www.bbc.co.uk/guidance/help/">Guidance warning metadata</link>.</para>
			</listitem>
			<listitem>
				<para>How this will be displayed to teachers is an important consideration in the design of products and services.</para>
			</listitem>
			<listitem>
				<para>However where no such information is available, it needs to be clear that this does <emphasise>not</emphasise> mean that the material is necessarily suitable for all ages (so perhaps a “no age range given” tag is appropriate?)</para>
			</listitem>
			<listitem>
				<para>The RES project will provide teachers with guidelines about the range of material available in RES and hints on how to navigate and mediate such a large volume of metadata and media.</para>
			</listitem>
			<listitem>
				<para>Teachers will also form their own view of what material is suitable for whom, and their ability to add that information to the metadata and share it is important.</para>
			</listitem>
			<listitem>
				<para>Every product or service built on the RES platform must have a means of feeding back any concerns about aspects of the assets or the metadata to the provider of the catalogue and assets.</para>
			</listitem>
		</itemizedlist>
	</section>

</chapter>
